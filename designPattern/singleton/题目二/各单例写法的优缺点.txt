

饿汉式单例：
	方法一：静态常量初始化实例。
	方式二：静态代码块初始化实例
	
	这两种方式效果是一样的
	优点：线程安全
	确定：在类加载时就初始化，不管是否用到了都会创建实例，有点浪费内存空间
	
	
懒汉式单例：
	方式一：getInstance方法中判断实例是否为空，为空则创建对象，否则直接返回对象实例
	优点：这种写法起到了Lazy Loading的效果。
	缺点：但是只能在单线程下使用。如果在多线程下会产生多个实例。所以在多线程环境下不可使用这种方式。
	
	方式二：方式一升级版，用synchronized关键字修饰getInstance方法
	优点：线程安全，也起到了Lazy Loading的效果。
	缺点：性能低，如果发生死锁会导致整个类不可用。
	
	方式三：双重校验锁
	优点：线程安全，延迟加载，效率较高
	缺点：仍然用到了synchronized。
	
	方式四：静态内部类
	优点：线程安全，延迟加载，效率高
	缺点：可以被序列化和反序列化破坏，但是可以通过在构造方法中加入判断防止被破坏
	
注册式单例：
	方式一：枚举式单例
	优点：系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可以提高系统性能。
	缺点：当想实例化一个单例类的时候，必须要记住使用相应的获取对象的方法，而不是使用new，可能会给其他开发人员造成困扰，特别是看不到源码的时候。
	
	方式二：容器式单例
	优点：对象方便管理，也属于懒汉加载。
	缺点：为了保证线程安全加上synchronized修饰代码块，所以也会影响性能。
	
ThreadLocal单例:
	优点：保证线程内的全局唯一，且天生线程安全。
	缺点：只适用于某些特定场景。
	
	
	
	